#pragma once
#include <string>
#include <windows.h>
#include "RenderSystem.hpp"
#include "Texture.hpp"
#include "Point.hpp"

namespace Halia
{
	//! A class to encapsulate generating and rendering a font
	/*!
		This object handles creating a font using GDI and then copying it into a texture,
		and also handles drawing a string based on the data generated from GDI.
	*/
	class Font
	{
	public:
		struct Character
		{
			int x;
			int y;
			int width;
			int flags; // 0 - Outside char range || 1 - Stored || 2 - No Graphic
		};

		//! Constructor
		Font( );

		//! Destructor
		~Font( );

		//! Initializes the font
		/*!
			Initializes the font using GDI to generate a 'sprite list' of every character
			within the character set range.
		*/
		bool Init( std::string fontname, int fontsize, int fontweight = 400, int charsetstart = 32, int charsetend = 126 );
		
		//! Draws a string using the font generated by Init
		void DrawString( int x, int y, std::string text, unsigned int color = 0xFF000000 ) const;

		//! Returns the size of the area taken up by a string
		Point GetDimensions( std::string text ) const;

	protected:
		//! Internal texture used for rendering
		Halia::Texture* mTex;

		//! State of the characters within the texture
		Character mChars[256];

		//! How high a line is
		int mLineHeight;
	};
};